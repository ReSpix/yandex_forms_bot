from ..reminders import notify
from ..key import api_url
from ..tgbot import dp, bot, user_in_chat
import requests
from aiogram.types import Message
from aiogram.filters import CommandStart, Command
from typing import Callable
import re
from functools import wraps


def requires_user_in_chat(func: Callable):
    @wraps(func)
    async def wrapper(message: Message, *args, **kwargs):
        if not await user_in_chat(message):
            return
        return await func(message, *args, **kwargs)
    return wrapper


@dp.message(CommandStart())
@requires_user_in_chat
async def command_start_handler(message: Message) -> None:
    await message.answer(f"–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –∏–∑ –Ø–Ω–¥–µ–∫—Å —Ñ–æ—Ä–º—ã")
    await show_commands(message)


@dp.message(Command("status"))
async def command_status_handler(message: Message) -> None:
    if not await user_in_chat(message):
        return
    await message.answer(f"(1/2) –ë–æ—Ç: –ê–∫—Ç–∏–≤–µ–Ω ‚úÖ")
    service_status = "–ù–µ–∞–∫—Ç–∏–≤–µ–Ω ‚ùå"
    try:
        res = requests.get(api_url, timeout=10)
        if "ok" in res.text:
            service_status = "–ê–∫—Ç–∏–≤–µ–Ω ‚úÖ"
    except:
        pass
    await message.answer(f"(2/2) –°–µ—Ä–≤–∏—Å: {service_status}")


@dp.message(Command("explain"))
async def command_explain_handler(message: Message) -> None:
    if not await user_in_chat(message):
        return
    await message.answer(
        f"–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç—É—Å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç 2 —Å—Ç–∞—Ç—É—Å–∞: –±–æ—Ç –∏ —Å–µ—Ä–≤–∏—Å.\n\nü§ñ –ë–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Ä–∞–±–æ—Ç—É –∫–Ω–æ–ø–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.\n\nüíª –°–µ—Ä–≤–∏—Å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ—Ç –æ—Ç–∫–ª–∏–∫–∞.\n\nP.S. –î–∞–∂–µ –µ—Å–ª–∏ –∏ –±–æ—Ç, –∏ —Å–µ—Ä–≤–∏—Å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã, —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –Ø–Ω–¥–µ–∫—Å —Ñ–æ—Ä–º –≤—Å–µ —Ä–∞–≤–Ω–æ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å (–Ω–æ –∫–Ω–æ–ø–∫–∏ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ –±—É–¥—É—Ç)"
    )


@dp.message(Command("notify"))
@requires_user_in_chat
async def handle_notify(message: Message):
    await notify()


@dp.message(Command("commands"))
async def show_commands(message: Message):
    if not await user_in_chat(message):
        return
    commands = await bot.get_my_commands()
    text = [f'/{a.command} - {a.description}' for a in commands]
    text.insert(0, '–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:')
    await message.answer('\n'.join(text))
